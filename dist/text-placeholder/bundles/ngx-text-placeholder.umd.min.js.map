{"version":3,"sources":["ng://ngx-text-placeholder/lib/text-placeholder.directive.ts","ng://ngx-text-placeholder/lib/text-placeholder.module.ts"],"names":["TextPlaceholderDirective","element","renderer","this","colors","size","prototype","ngAfterViewInit","console","log","imgSrc","textPlaceholder","nativeElement","src","applyPlaceholder","child","createElement","innerHTML","generatePlaceholder","style","width","height","getRandomColor","color","parent","parentNode","removeChild","appendChild","placeholder","parts","split","length","toUpperCase","Math","floor","random","onError","event","Directive","args","selector","ElementRef","Renderer2","Input","HostListener","TextPlaceholderModule","NgModule","declarations","imports","exports"],"mappings":"sRAAA,IAAAA,EAAA,WA+EE,SAAAA,EACUC,EACAC,GADAC,KAAAF,QAAAA,EACAE,KAAAD,SAAAA,EA1EOC,KAAAC,OAAS,CACxB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAUFD,KAAAE,KAAO,GAwDT,OAjDEL,EAAAM,UAAAC,gBAAA,WACEC,QAAQC,IAAIN,KAAKF,QAASE,KAAKO,OAAQP,KAAKQ,iBACxCR,KAAKO,OACPP,KAAKF,QAAQW,cAAcC,IAAMV,KAAKO,OAEtCP,KAAKW,oBAIDd,EAAAM,UAAAQ,iBAAR,eAMQC,EAAQZ,KAAKD,SAASc,cAAc,KAC1CD,EAAME,UAAYd,KAAKe,oBAAoBf,KAAKQ,iBAChDI,EAAMI,MAAMC,MAAQjB,KAAKE,KAAO,KAChCU,EAAMI,MAAME,OAASlB,KAAKE,KAAO,KACjCU,EAAMI,MAAM,iBAAmB,MAC/BJ,EAAMI,MAAM,oBAAsBhB,KAAKmB,iBACvCP,EAAMI,MAAM,eAAiBhB,KAAKE,KAAO,KACzCU,EAAMI,MAAMI,MAAQ,QACpBR,EAAMI,MAAM,cAAgB,SAC5BJ,EAAMI,MAAM,aAAgBhB,KAAKE,KAAO,IAAO,KAC/CU,EAAMI,MAAM,eAAiB,UAC7BX,QAAQC,IAAIM,OACNS,EAASrB,KAAKD,SAASuB,WAAWtB,KAAKF,QAAQW,eACrDT,KAAKD,SAASwB,YAAYF,EAAQrB,KAAKF,QAAQW,eAC/CT,KAAKD,SAASyB,YAAYH,EAAQT,IAG5Bf,EAAAM,UAAAY,oBAAR,SAA4BU,OACpBC,EAAQD,EAAYE,MAAM,KAChC,OAAmB,EAAfD,EAAME,QACAF,EAAM,GAAG,GAAKA,EAAM,GAAG,IAAIG,eAE3BH,EAAM,GAAG,GAAKA,EAAM,GAAG,IAAIG,eAI/BhC,EAAAM,UAAAgB,eAAR,WACE,OAAOnB,KAAKC,OAAO6B,KAAKC,MAAMD,KAAKE,SAAYhC,KAAKC,OAAa,UAInEJ,EAAAM,UAAA8B,QADA,SACQC,GACNlC,KAAKW,wCAjIRwB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,iEAHeC,EAAAA,kBAA2BC,EAAAA,6CAsEnDC,EAAAA,+BAGAA,EAAAA,oBAGAA,EAAAA,uBAqDAC,EAAAA,aAAYL,KAAA,CAAC,YAIhBvC,EArIA,GCAA6C,EAAA,WAGA,SAAAA,KAUqC,2BAVpCC,EAAAA,SAAQP,KAAA,CAAC,CACRQ,aAAc,CACZ/C,GAEFgD,QAAS,GAETC,QAAS,CACPjD,OAGiC6C,EAbrC","sourcesContent":["import { Directive, Input, ElementRef, AfterViewInit, Renderer2, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[textPlaceholder]'\n})\nexport class TextPlaceholderDirective implements AfterViewInit {\n\n  private readonly colors = [\n    '#e53935',\n    '#d32f2f',\n    '#c62828',\n    '#b71c1c',\n    '#d81b60',\n    '#c2185b',\n    '#ad1457',\n    '#880e4f',\n    '#8e24aa',\n    '#7b1fa2',\n    '#6a1b9a',\n    '#4a148c',\n    '#5e35b1',\n    '#512da8',\n    '#4527a0',\n    '#311b92',\n    '#3949ab',\n    '#303f9f',\n    '#283593',\n    '#1a237e',\n    '#1e88e5',\n    '#1976d2',\n    '#1565c0',\n    '#0d47a1',\n    '#039be5',\n    '#0288d1',\n    '#0277bd',\n    '#01579b',\n    '#00acc1',\n    '#0097a7',\n    '#00838f',\n    '#006064',\n    '#00897b',\n    '#00796b',\n    '#00695c',\n    '#004d40',\n    '#43a047',\n    '#388e3c',\n    '#2e7d32',\n    '#1b5e20',\n    '#fb8c00',\n    '#f57c00',\n    '#ef6c00',\n    '#e65100',\n    '#f4511e',\n    '#e64a19',\n    '#d84315',\n    '#bf360c',\n    '#6d4c41',\n    '#5d4037',\n    '#4e342e',\n    '#3e2723',\n    '#757575',\n    '#616161',\n    '#424242',\n    '#212121',\n    '#546e7a',\n    '#455a64',\n    '#37474f',\n    '#263238'\n  ];\n\n  @Input()\n  imgSrc: string;\n\n  @Input()\n  textPlaceholder: string;\n\n  @Input()\n  size = 45;\n\n  constructor(\n    private element: ElementRef,\n    private renderer: Renderer2\n  ) { }\n\n  ngAfterViewInit() {\n    console.log(this.element, this.imgSrc, this.textPlaceholder);\n    if (this.imgSrc) {\n      this.element.nativeElement.src = this.imgSrc;\n    } else {\n      this.applyPlaceholder();\n    }\n  }\n\n  private applyPlaceholder() {\n    // NativeElement, document used\n    // const newElem = document.createElement('p');\n    // newElem.innerHTML = this.generatePlaceholder(this.textPlaceholder);\n    // this.element.nativeElement.parentNode.replaceChild(newElem, this.element.nativeElement);\n\n    const child = this.renderer.createElement('p');\n    child.innerHTML = this.generatePlaceholder(this.textPlaceholder);\n    child.style.width = this.size + 'px';\n    child.style.height = this.size + 'px';\n    child.style['border-radius'] = '50%';\n    child.style['background-color'] = this.getRandomColor();\n    child.style['line-height'] = this.size + 'px';\n    child.style.color = 'white';\n    child.style['text-align'] = 'center';\n    child.style['font-size'] = (this.size / 2.5) + 'px';\n    child.style['font-family'] = 'verdana';\n    console.log(child);\n    const parent = this.renderer.parentNode(this.element.nativeElement);\n    this.renderer.removeChild(parent, this.element.nativeElement);\n    this.renderer.appendChild(parent, child);\n  }\n\n  private generatePlaceholder(placeholder: string): string {\n    const parts = placeholder.split(' ');\n    if (parts.length > 1) {\n      return (parts[0][0] + parts[1][0]).toUpperCase();\n    } else {\n      return (parts[0][0] + parts[0][1]).toUpperCase();\n    }\n  }\n\n  private getRandomColor(): string {\n    return this.colors[Math.floor(Math.random() * (this.colors.length))];\n  }\n\n  @HostListener('error')\n  onError(event) {\n    this.applyPlaceholder();\n  }\n}\n\n","import { TextPlaceholderDirective } from './text-placeholder.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [\n    TextPlaceholderDirective\n  ],\n  imports: [\n  ],\n  exports: [\n    TextPlaceholderDirective\n  ]\n})\nexport class TextPlaceholderModule { }\n"]}